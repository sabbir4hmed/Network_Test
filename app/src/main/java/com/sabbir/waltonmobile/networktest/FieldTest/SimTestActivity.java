package com.sabbir.waltonmobile.networktest.FieldTest;

import android.content.Intent;
import android.content.SharedPreferences;
import android.icu.text.DisplayOptions;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import android.text.method.TextKeyListener;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

//import com.sabbir.waltonmobile.networktest.MainActivity;
import com.sabbir.waltonmobile.networktest.R;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class SimTestActivity extends AppCompatActivity {

    // UI Components
    private EditText etId, etModel, etBuildVersion, etFieldTestLocation;
    private RadioGroup rgSoftwareType;
    private RadioButton rbUser, rbDebug, rbDemo;
    private CheckBox cbRobi, cbAirtel, cbGrameenPhone, cbBanglalink, cbTeletalk;
    private Button btnStartFieldTest, btnResetField;
    // SharedPreferences for data persistence
    private SharedPreferences sharedPreferences;
    private static final String PREF_NAME = "FieldTestReports";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_sim_test);

        initializeViews();
        setupAutoGeneratedFields();
        setupClickListeners();

        // Initialize SharedPreferences
        sharedPreferences = getSharedPreferences(PREF_NAME, MODE_PRIVATE);

    }

    private void setupClickListeners() {
        btnStartFieldTest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (validateForm()) {
                    saveFieldTestData();
                    Toast.makeText(SimTestActivity.this, "Field test data saved successfully!", Toast.LENGTH_SHORT).show();

                    // Optional: Navigate to next activity or show test results
                    Intent intent = new Intent(SimTestActivity.this, FieldTestActivity.class);
                    startActivity(intent);
                }
            }
        });

        btnResetField.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                resetAllFields();
                Toast.makeText(SimTestActivity.this, "All fields have been reset", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private void resetAllFields() {
        // Reset ID field (user input)
        etId.setText("");
        etId.setError(null);

        // Keep Model and Build Version as they are auto-generated
        // etModel and etBuildVersion remain unchanged

        // Reset Software Type
        rgSoftwareType.clearCheck();

        // Reset Field Test Location
        etFieldTestLocation.setText("");
        etFieldTestLocation.setError(null);

        // Reset all operator checkboxes
        cbRobi.setChecked(false);
        cbAirtel.setChecked(false);
        cbGrameenPhone.setChecked(false);
        cbBanglalink.setChecked(false);
        cbTeletalk.setChecked(false);
    }

    private void saveFieldTestData() {
        // Get current timestamp
        String timestamp = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss", Locale.getDefault()).format(new Date());

        // Collect form data
        String id = etId.getText().toString().trim();
        String model = etModel.getText().toString().trim();
        String buildVersion = etBuildVersion.getText().toString().trim();
        String softwareType = getSelectedSoftwareType();
        String location = etFieldTestLocation.getText().toString().trim();
        String operators = getSelectedOperators();

        // Create report data string
        StringBuilder reportData = new StringBuilder();
        reportData.append("=== FIELD TEST REPORT ===\n");
        reportData.append("Timestamp: ").append(timestamp).append("\n");
        reportData.append("ID: ").append(id).append("\n");
        reportData.append("Model: ").append(model).append("\n");
        reportData.append("Build Version: ").append(buildVersion).append("\n");
        reportData.append("Software Type: ").append(softwareType).append("\n");
        reportData.append("Location: ").append(location).append("\n");
        reportData.append("Selected Operators: ").append(operators).append("\n");
        reportData.append("========================\n\n");

        // Save to SharedPreferences
        SharedPreferences.Editor editor = sharedPreferences.edit();

        // Get existing reports
        String existingReports = sharedPreferences.getString("all_reports", "");

        // Append new report
        String updatedReports = existingReports + reportData.toString();
        editor.putString("all_reports", updatedReports);

        // Save individual fields for easy access
        editor.putString("last_id", id);
        editor.putString("last_model", model);
        editor.putString("last_build_version", buildVersion);
        editor.putString("last_software_type", softwareType);
        editor.putString("last_location", location);
        editor.putString("last_operators", operators);
        editor.putString("last_timestamp", timestamp);

        // Increment report counter
        int reportCount = sharedPreferences.getInt("report_count", 0);
        editor.putInt("report_count", reportCount + 1);

        editor.apply();
    }

    private String getSelectedOperators() {
        List<String> selectedOperators = new ArrayList<>();

        if (cbRobi.isChecked()) selectedOperators.add("Robi");
        if (cbAirtel.isChecked()) selectedOperators.add("Airtel");
        if (cbGrameenPhone.isChecked()) selectedOperators.add("GrameenPhone");
        if (cbBanglalink.isChecked()) selectedOperators.add("Banglalink");
        if (cbTeletalk.isChecked()) selectedOperators.add("Teletalk");

        return TextUtils.join(", ", selectedOperators);
    }

    private String getSelectedSoftwareType() {
        int selectedId = rgSoftwareType.getCheckedRadioButtonId();
        if (selectedId == R.id.rbUser) {
            return "User";
        } else if (selectedId == R.id.rbDebug) {
            return "Debug";
        } else if (selectedId == R.id.rbDemo) {
            return "Demo";
        }
        return "Not Selected";
    }

    private boolean validateForm() {
//Validate ID field
        String id = etId.getText().toString().trim();
        if (TextUtils.isEmpty(id)) {
            etId.setError("ID is required");
            etId.requestFocus();
            return false;

        }

        // Validate Software Type selection
        if (rgSoftwareType.getCheckedRadioButtonId() == -1) {
            Toast.makeText(this, "Please select a Software Type", Toast.LENGTH_SHORT).show();
            return false;
        }
        // Validate Field Test Location
        String location = etFieldTestLocation.getText().toString().trim();
        if (TextUtils.isEmpty(location)) {
            etFieldTestLocation.setError("Field Test Location is required");
            etFieldTestLocation.requestFocus();
            return false;
        }
        // Validate at least one operator is selected
        if (!isAtLeastOneOperatorSelected()) {
            Toast.makeText(this, "Please select at least one operator", Toast.LENGTH_SHORT).show();
            return false;
        }
        return true;

    }

    private boolean isAtLeastOneOperatorSelected() {
        return cbRobi.isChecked() || cbAirtel.isChecked() || cbGrameenPhone.isChecked()
                || cbBanglalink.isChecked() || cbTeletalk.isChecked();
    }

    private void setupAutoGeneratedFields() {

        // Auto-populate Model field
        String deviceModel = getDeviceModel();
        etModel.setText(deviceModel);
        // Auto-populate Build Version field
        String buildInfo = getBuildVersionInfo();
        etBuildVersion.setText(buildInfo);
    }

    private String getBuildVersionInfo() {
        StringBuilder buildInfo = new StringBuilder();
        buildInfo.append("Android Version: ").append(Build.VERSION.RELEASE).append("\n");
        buildInfo.append("API Level: ").append(Build.VERSION.SDK_INT).append("\n");
        buildInfo.append("Build Number: ").append(Build.DISPLAY).append("\n");
        buildInfo.append("Build ID: ").append(Build.ID).append("\n");
        buildInfo.append("Build Type: ").append(Build.TYPE).append("\n");
        buildInfo.append("Build Tags: ").append(Build.TAGS).append("\n");
        buildInfo.append("Build Time: ").append(new Date(Build.TIME).toString());

        return buildInfo.toString();
    }

    private String getDeviceModel() {
        String manufacturer = Build.MANUFACTURER;
        String model = Build.MODEL;

        if (model.toLowerCase().startsWith(manufacturer.toLowerCase())) {
            return capitalize(model);
        } else {
            return capitalize(manufacturer) + " " + model;
        }
    }

    private String capitalize(String str) {
        if (TextUtils.isEmpty(str)) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase();
    }


    private void initializeViews() {

        etId = findViewById(R.id.etId);
        etModel = findViewById(R.id.etModel);
        etBuildVersion = findViewById(R.id.etBuildVersion);
        etFieldTestLocation = findViewById(R.id.etFieldTestLocation);
        // RadioGroup and RadioButtons
        rgSoftwareType = findViewById(R.id.rgSoftwareType);
        rbUser = findViewById(R.id.rbUser);
        rbDebug = findViewById(R.id.rbDebug);
        rbDemo = findViewById(R.id.rbDemo);
        // CheckBoxes
        cbRobi = findViewById(R.id.cbRobi);
        cbAirtel = findViewById(R.id.cbAirtel);
        cbGrameenPhone = findViewById(R.id.cbGrameenPhone);
        cbBanglalink = findViewById(R.id.cbBanglalink);
        cbTeletalk = findViewById(R.id.cbTeletalk);
        // Buttons
        btnStartFieldTest = findViewById(R.id.btnStartFieldTest);
        btnResetField = findViewById(R.id.btnResetField);
    }

    // Method to get all saved reports (for future use)
    public String getAllSavedReports() {
        return sharedPreferences.getString("all_reports", "No reports found");
    }
    // Method to get report count (for future use)
    public int getReportCount() {
        return sharedPreferences.getInt("report_count", 0);
    }
    // Method to clear all reports (for future use)
    public void clearAllReports() {
        SharedPreferences.Editor editor = sharedPreferences.edit();
        editor.clear();
        editor.apply();
        Toast.makeText(this, "All reports cleared", Toast.LENGTH_SHORT).show();
    }

}